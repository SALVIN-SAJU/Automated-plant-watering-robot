#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <ESP32Servo.h>  // Use ESP32-specific Servo library

// Pin Definitions
const int moisturePin = 36;   // GPIO36 (VP) for soil moisture sensor (ADC1 on ESP32)
const int relayPin = 5;       // GPIO5 for water pump relay
const int motorA_IN1 = 2;     // GPIO2 for Motor A IN1
const int motorA_IN2 = 4;     // GPIO4 for Motor A IN2
const int motorB_IN3 = 16;    // GPIO16 for Motor B IN3
const int motorB_IN4 = 17;    // GPIO17 for Motor B IN4
const int servoPin = 13;      // GPIO13 for servo

// WiFi Credentials
const char* ssid = "myplant";
const char* password = "12345678";

// Create server on port 80
AsyncWebServer server(80);
Servo myServo;  // Create a Servo object

// Moisture threshold
const int moistureThreshold = 500; // Adjust as necessary

// Servo positions
const int servoUpPosition = 0;    // Servo "up" position (sensor out of soil)
const int servoDownPosition = 90; // Servo "down" position (sensor in soil)

// Timer to avoid frequent watering
unsigned long previousMillis = 0;
const long interval = 10000; // 10 seconds interval for checking moisture

void setup() {
    // Initialize pins
    pinMode(relayPin, OUTPUT);
    pinMode(motorA_IN1, OUTPUT);
    pinMode(motorA_IN2, OUTPUT);
    pinMode(motorB_IN3, OUTPUT);
    pinMode(motorB_IN4, OUTPUT);
   
    // Start Serial for debugging
    Serial.begin(115200);
   
    // Initialize Servo
    myServo.attach(servoPin);
    myServo.write(servoUpPosition);  // Start with the servo in "up" position
   
    // Connect to WiFi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("Connected to WiFi");

    // Setup web server routes
    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
        String html = "<h1>Plant Watering Robot</h1>";
        html += "<button onclick=\"fetch('/water')\">Water</button><br>";
        html += "<button onclick=\"fetch('/forward')\">Forward</button><br>";
        html += "<button onclick=\"fetch('/backward')\">Backward</button><br>";
        html += "<button onclick=\"fetch('/left')\">Left</button><br>";
        html += "<button onclick=\"fetch('/right')\">Right</button><br>";
        html += "<button onclick=\"fetch('/servo_down')\">Insert Sensor</button><br>";
        html += "<button onclick=\"fetch('/servo_up')\">Remove Sensor</button><br>";
        request->send(200, "text/html", html);
    });

    server.on("/water", HTTP_GET, [](AsyncWebServerRequest *request) {
        waterPlant();
        request->send(200, "text/plain", "Watering Done");
    });

    server.on("/servo_down", HTTP_GET, [](AsyncWebServerRequest *request) {
        myServo.write(servoDownPosition); // Move the sensor into the soil
        request->send(200, "text/plain", "Sensor Inserted into Soil");
    });

    server.on("/servo_up", HTTP_GET, [](AsyncWebServerRequest *request) {
        myServo.write(servoUpPosition); // Move the sensor out of the soil
        request->send(200, "text/plain", "Sensor Removed from Soil");
    });

    server.on("/forward", HTTP_GET, [](AsyncWebServerRequest *request) {
        moveForward();
        request->send(200, "text/plain", "Moving Forward");
    });

    server.on("/backward", HTTP_GET, [](AsyncWebServerRequest *request) {
        moveBackward();
        request->send(200, "text/plain", "Moving Backward");
    });

    server.on("/left", HTTP_GET, [](AsyncWebServerRequest *request) {
        turnLeft();
        request->send(200, "text/plain", "Turning Left");
    });

    server.on("/right", HTTP_GET, [](AsyncWebServerRequest *request) {
        turnRight();
        request->send(200, "text/plain", "Turning Right");
    });

    server.begin();
}

void loop() {
    unsigned long currentMillis = millis();

    // Only read moisture when the sensor is in the soil (down position)
    if (myServo.read() == servoDownPosition) {
        int moistureValue = analogRead(moisturePin);
        Serial.print("Soil Moisture: ");
        Serial.println(moistureValue);
        
        // If the moisture value is below the threshold, trigger watering
        if (moistureValue < moistureThreshold) {
            waterPlant();
        }
    }

    // Delay between sensor readings to avoid excessive watering
    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis;
    }
}

void waterPlant() {
    digitalWrite(relayPin, HIGH); // Activate pump
    delay(5000); // Water for 5 seconds
    digitalWrite(relayPin, LOW); // Deactivate pump
}

void moveForward() {
    digitalWrite(motorA_IN1, HIGH);
    digitalWrite(motorA_IN2, LOW);
    digitalWrite(motorB_IN3, HIGH);
    digitalWrite(motorB_IN4, LOW);
}

void moveBackward() {
    digitalWrite(motorA_IN1, LOW);
    digitalWrite(motorA_IN2, HIGH);
    digitalWrite(motorB_IN3, LOW);
    digitalWrite(motorB_IN4, HIGH);
}

void turnLeft() {
    digitalWrite(motorA_IN1, LOW);
    digitalWrite(motorA_IN2, HIGH);
    digitalWrite(motorB_IN3, HIGH);
    digitalWrite(motorB_IN4, LOW);
}

void turnRight() {
    digitalWrite(motorA_IN1, HIGH);
    digitalWrite(motorA_IN2, LOW);
    digitalWrite(motorB_IN3, LOW);
    digitalWrite(motorB_IN4, HIGH);
}
